1. Create a config panel to set the application configuration options
2. Create something like a style manager for the various plots
3. Create an option to create the folder structure the application expects. All experiments should be stored in the
appropriate folder.
4. Create a function that checks the folder structure
5. We could store that parsed experiments in an hdf5 file or an sqlite db so we don't have to parse the folder structure
in every instance of the application. This means that there should be an option for updating the db.
6. Having this application in a working condition we could relate it to the imaging sript. That means that we could
run the multianalysis.py script inside this app and specify the output folder for the hdf5 file. That means that we should

5. Use soft links to datastores to create list of rois for the experiments.
5.5 Having a list of rois for experiments in a datastore we could present a list with them and run threads to compute the
    rest of the data
6. Create an overlay in Image_details for quicker region choice
7.




###################################### Fixes ######################################
1. OnsetLatency -> Boxplot. Find the first frame where the response goes over .3 of meanbaseline for 3-4 continuous frames.
2. Fix the boxplot colors
3. Align the boxplots
4. Image region


4. Persist the parser. At this time we instantiate it each time we plot something




TODO
----
1. Complete analysis for incomplete h5py
2. Put resp map image instead of anat in fpi_image
3. Allow region choice from fpi_image -> recalculate
4. Plots from ROIs


